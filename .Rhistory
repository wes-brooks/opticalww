load("M:/QW Monitoring Team/GLRI toxics/Shared_optical_data/dfAll.RData")
View(dfAll)
names(dfAll)
grep(names(dfAll)
)
grep("^A\d\d\d$", names(dfAll))
grep("^A\\d\\d\\d$", names(dfAll))
names(dfAll)[grep("^A\\d\\d\\d$", names(dfAll))]
names(dfAll)[grep("^A[\\d]+$", names(dfAll))]
names(dfAll)[grep("^A[0-9]+$", names(dfAll))]
grep("^A[0-9]+$", names(dfAll))
grep("^A[0-9]+$", names(dfAll)) -> indx
indx
dfAll[1,indx]
dfAll[2,indx]
dfAll[20,indx]
plot(dfAll[20,indx])
plot(1:length(indx),dfAll[20,indx])
plot(1:length(indx),dfAll[20,indx], type='l')
names(dfAll)
load("M:/QW Monitoring Team/GLRI toxics/Shared_optical_data/Vectorized3DArray_GLRI_Final_Aug2013.RData")
load("M:/QW Monitoring Team/GLRI toxics/Shared_optical_data/PCA_GLRI.RData")
read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE)
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE)
head(absorb)
head(absorb)
load("~/git/eem/data/dfAll.RData")
load("data/dfAll.RData")
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE)
absorb2 = list()
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
#Find which samples have both a spectrum and an entry in dfAll
response = "BACHUM.cn.100mls"
gr = trim(colnames(absorb))
for (g in gr) {
if(g %in% dfAll$GRnumber && !is.na(dfAll[[response]][which(dfAll$GRnumber==g)])) {
#The trailing [1] is because a few samples matched duplicate gr-numbers
indx1 = which(dfAll$GRnumber==g)[1]
indx2 = which(colnames(absorb)==g)[1]
#Populate the list of data
absorb2[[g]] = list(spectrum=absorb[,indx2], response=dfAll[[response]][indx1])
}
}
length(absorb2)
absorb2[1]
plot(absorb2[1][['spectrum']])
plot(1:length(absorb2[1][['spectrum']], absorb2[1][['spectrum']])
)
plot(1:length(absorb2[1][['spectrum']]), absorb2[1][['spectrum']], type='l')
plot(1:length(absorb2[1][['spectrum']]), absorb2[1][['spectrum']], type='l')
length(absorb2[1][['spectrum']])
absorb2[1][['spectrum']]
absorb2[1]
absorb2[1][1]
absorb2[['gr13307']][['spectrum']]
plot(absorb2[['gr13307']][['spectrum']], type='l')
head(absorb)
?read.csv
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE, rownames='wavelength')
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE, rownames='wavelength')
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE, row.names='wavelength')
absorb2 = list()
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
#Find which samples have both a spectrum and an entry in dfAll
response = "BACHUM.cn.100mls"
gr = trim(colnames(absorb))
for (g in gr) {
if(g %in% dfAll$GRnumber && !is.na(dfAll[[response]][which(dfAll$GRnumber==g)])) {
#The trailing [1] is because a few samples matched duplicate gr-numbers
indx1 = which(dfAll$GRnumber==g)[1]
indx2 = which(colnames(absorb)==g)[1]
#Populate the list of data
absorb2[[g]] = list(spectrum=absorb[,indx2], response=dfAll[[response]][indx1])
}
}
absorb2[['gr13307']][['spectrum']]
load("data/dfAll.RData")
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE, row.names='wavelength')
absorb2 = list()
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
#Find which samples have both a spectrum and an entry in dfAll
response = "BACHUM.cn.100mls"
gr = trim(colnames(absorb))
for (g in gr) {
if(g %in% dfAll$GRnumber && !is.na(dfAll[[response]][which(dfAll$GRnumber==g)])) {
#The trailing [1] is because a few samples matched duplicate gr-numbers
indx1 = which(dfAll$GRnumber==g)[1]
indx2 = which(colnames(absorb)==g)[1]
#Populate the list of data
absorb2[[g]] = list(spectrum=absorb[,indx2], response=dfAll[[response]][indx1])
names(absorb2[[g]][['spectrum']]) = rownames(absorb)
}
}
absorb2[['gr13307']][['spectrum']]
absorb2[[g]] = list(spectrum=cbind(wavelength=rownames(absorb), absorbance=absorb[,indx2]), response=dfAll[[response]][indx1])
absorb2[[g]]
absorb2[[g]] = list(spectrum=as.numeric(cbind(wavelength=rownames(absorb), absorbance=absorb[,indx2])), response=dfAll[[response]][indx1])
absorb2[[g]]
absorb2[[g]] = list(spectrum=cbind(wavelength=as.numeric(rownames(absorb)), absorbance=as.numeric(absorb[,indx2])), response=dfAll[[response]][indx1])
absorb2[[g]]
absorb2[[g]] = list(spectrum=cbind(wavelength=wavelength, absorbance=absorb[,indx2]), response=dfAll[[response]][indx1])
load("data/dfAll.RData")
absorb = read.csv("data/compiled_absorbance_Sept2013.csv", header=TRUE, row.names='wavelength')
wavelength = as.numeric(rownames(absorb))
absorb2 = list()
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
#Find which samples have both a spectrum and an entry in dfAll
response = "BACHUM.cn.100mls"
gr = trim(colnames(absorb))
for (g in gr) {
if(g %in% dfAll$GRnumber && !is.na(dfAll[[response]][which(dfAll$GRnumber==g)])) {
#The trailing [1] is because a few samples matched duplicate gr-numbers
indx1 = which(dfAll$GRnumber==g)[1]
indx2 = which(colnames(absorb)==g)[1]
#Populate the list of data
absorb2[[g]] = list(spectrum=cbind(wavelength=wavelength, absorbance=absorb[,indx2]), response=dfAll[[response]][indx1])
}
}
absorbs[['gr13307']]
absorb2[['gr13307']]
plot(absorb2[['gr13307']][['spectrum']])
plot(absorb2[['gr13307']][['spectrum']], 'type='l'')
plot(absorb2[['gr13307']][['spectrum']], 'type='l')
plot(absorb2[['gr13307']][['spectrum']], type='l')
x = 1/(wavelength-199)
x
plot(wavelength,x,type='l')
lm(absorb2[['gr13307']][['spectrum']][['absorbance']]~x)
absorb2[['gr13307']][['spectrum']][['absorbance']]
absorb2[['gr13307']][['spectrum']]
absorb2[['gr13307']][['spectrum']][['absorbance']]
absorb2[['gr13307']][['spectrum']][,'absorbance']
absorb2[[g]] = list(spectrum=data.frame(wavelength=wavelength, absorbance=absorb[,indx2]), response=dfAll[[response]][indx1])
g
absorb2[[g]][['spectrum']][,'absorbance']
absorb2[[g]][['spectrum']][['absorbance']]
lm(absorb2[[g]][['spectrum']][['absorbance']]~x)
lm(absorb2[[g]][['spectrum']][['absorbance']]~x)$fitted
lm(absorb2[[g]][['spectrum']][['absorbance']]~x)$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorb2[[g]][['spectrum']][['absorbance']]~log(x))$fitted->ff
ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(log(absorb2[[g]][['spectrum']][['absorbance']])~log(x))$fitted->ff
log(absorb2[[g]][['spectrum']][['absorbance']])
absorb2[[g]][['spectrum']][['absorbance']]
lm(log(absorbance~log(wavelength), data=absorb[[g]][['spectrum']])$fitted->ff
)
lm(absorbance~log(wavelength), data=absorb[[g]][['spectrum']])$fitted->ff
lm(absorbance~log(wavelength), data=absorb2[[g]][['spectrum']])$fitted->ff
ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~log(wavelength-199), data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~log(wavelength-199.9), data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
abline(a=0,b=1)
lm(absorbance~wavelength, data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~log(log(wavelength)), data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~log(log(log(wavelength))), data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~1/wavelength), data=absorb2[[g]][['spectrum']])$fitted->ff
lm(absorbance~1/wavelength, data=absorb2[[g]][['spectrum']])$fitted->ff
plot(absorb2[[g]][['spectrum']][['absorbance']], ff)
lm(absorbance~wavelength**(-1), data=absorb2[[g]][['spectrum']])$fitted->ff
lm(absorbance~wavelength**(-1), data=absorb2[[g]][['spectrum']])$fitted->ff
install.packages("AID")
require(AID)
boxcoxnc(absorb2[[g]][['spectrum']])
boxcoxnc(absorb2[[g]][['spectrum']][,1])
source('~/.active-rstudio-document', echo=TRUE)
box.cox <- function(x, parms=c(1,0)) {
lambda <- parms[1]
offset <- parms[2]
if (lambda==0) log(x+offset) else ((x+offset)^lambda - 1)/lambda
}
threepoint <- function(x, y, ladder=c(1, 1/2, 1/3, 0, -1/2, -1)) {
# x and y are length-three samples from a dataset.
dx <- diff(x)
f <- function(parms) (diff(diff(box.cox(y, parms)) / dx))^2
fit <- nlm(f, c(1,0))
parms <- fit$estimate #$
lambda <- ladder[which.min(abs(parms[1] - ladder))]
if (lambda==0) offset = 0 else {
do <- diff(range(y))
offset <- optimize(function(x) f(c(lambda, x)),
c(max(-min(x), parms[2]-do), parms[2]+do))$minimum
}
c(lambda, offset)
}
dat = absorb2[[g]][['spectrum']]
n <- nrow(dat)
i3 <- c(2, floor((n+1)/2), n-1)
parms <- threepoint(dat[i3,1], dat[i3,2])
parms
dat
?diff
?nlm
parms <- threepoint(dat[,1], dat[,2])
?logLik
y
lm(GNP~Population, data=longley)
logLik(lm(GNP~Population, data=longley))
str(logLik(lm(GNP~Population, data=longley)))
logLik(lm(GNP~Population, data=longley))[['logLik']]
logLik(lm(GNP~Population, data=longley))[['logLik']]
logLik(lm(GNP~Population, data=longley))
logLik(lm(GNP~Population, data=longley))-1
logLik(lm(GNP~Population+Employed, data=longley))
?optimize
bcreg = function(lambda, y, x) {
resp = box.cox(y, c(lambda,0))
return(logLik(lm(resp~x)))
}
optimize(bcreg, interval=c(-2,2), y=dat[,2], x=dat[,1], maximum=TRUE)
box.cox(dat[,2], c(0.012781,0))
hist(box.cox(dat[,2], c(0.012781,0)))
hist(box.cox(dat[,2], c(0.012781,0)))
box.cox(dat[,2], c(0.012781,0)) -> yy
lm(yy~dat[,2])
lm(yy~dat[,2])$fitted -> ff
plot(ff,yy)
yy
ff
cbind(ff,yy)
plot(cbind(ff,yy))
abline(a=0,b=1)
dat[,2]
plot(dat[,2])
dat
lm(yy~dat[,1])
optimize(bcreg, interval=c(-2,2), y=dat[,2], x=dat[,1], maximum=TRUE)
lm(yy~dat[,1])
lm(yy~dat[,1])$fitted -> ff
plot(cbind(ff,yy))
abline(a=0,b=1)
plot(ff, dat[,1])
dim(dat)
length(ff)
length(yy)
plot(cbind(ff,yy[!is.na(yy)]))
abline(a=0,b=1)
